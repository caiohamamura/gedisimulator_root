name: CMake Cross-Platform Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Release, Debug]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        submodules: true

    # Linux dependencies
    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake git \
          libgsl-dev libgdal-dev libhdf5-dev libtiff-dev libgeotiff-dev

    # macOS dependencies
    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install cmake gsl gdal hdf5 libtiff libgeotiff

    # Windows dependencies using MSYS2
    - name: Install MSYS2 and dependencies (Windows)
      if: runner.os == 'Windows'
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-gsl
          mingw-w64-x86_64-gdal
          mingw-w64-x86_64-hdf5
          mingw-w64-x86_64-libtiff
          mingw-w64-x86_64-libgeotiff
          make
        shell: msys2 {0}

    # Configure CMake
    - name: Configure Build CMake
      if: runner.os == 'Windows'
      run: |
        cmake -B build -S . -G "MSYS Makefiles" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        cmake --build build --config ${{ matrix.build_type }}
      shell: msys2 {0}

    # Build
    - name: Conf Build
      if: runner.os != 'Windows'
      run: |
        cmake -B build -S . -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        cmake --build build --config ${{ matrix.build_type }}
      shell: bash